
using System;
using System.ComponentModel;
class Program
{
    private struct Vector2Int
    {
        public int x;
        public int y;
        public Vector2Int(int x, int y) { this.x = x; this.y = y; }
    }

    static void Main(string[] args)
    {
        int testCase = int.Parse(Console.ReadLine());

        while(testCase > 0)
        {
            List<Vector2Int> positions = new List<Vector2Int>();
            int stopoverCount = int.Parse(Console.ReadLine());
            for(int i = 0; i < stopoverCount + 2; i++)
            {
                string[] pos = Console.ReadLine().Split();
                int x = int.Parse(pos[0]);
                int y = int.Parse(pos[1]);
                Vector2Int position = new Vector2Int(x, y);
                positions.Add(position);
            }
            Console.WriteLine(BFS(positions) ? "happy" : "sad");
            testCase--;
        }
    }

    private static bool BFS(List<Vector2Int> positions)
    {
        Queue<int> queue = new Queue<int>();
        bool[] visited = new bool[positions.Count];
        queue.Enqueue(0);
        visited[0] = true;

        while(queue.Count > 0)
        {
            int cur = queue.Dequeue();
            
            if(cur == positions.Count - 1)
            {
                return true;
            }

            for(int i = 0; i < positions.Count; i++)
            {
                if (!visited[i] && Distance(positions[cur], positions[i]) <= 1000)
                {
                    queue.Enqueue(i);
                    visited[i] = true;
                }
            }
        }
        return false;
    }

    //Manhattan Distance also known as L1 Street
    private static int Distance(Vector2Int start, Vector2Int destination)
    {
        return
            Math.Abs(start.x - destination.x) +
            Math.Abs(start.y - destination.y);
    }
}
